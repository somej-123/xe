xe플렛폼

모듈과 페이지 이해하기

프로그램 모듈과 콘텐츠 모듈

xe 코어는 추가 설치하여 기능을 확장할 수 있는 프로그램 단위를 "모듈"이라고 말한다.
즉 게시판 모듈을 설치하였기 때문에 게시판을 생성하고 사용할 수 있는 것이다.
또한 모듈은 "독자적 기능을 가진 교환 가능한 구성 요소" 이기 때문에 새로운 기능을 포함한 모듈로 교체하여 사용할 수도 있다.

그런데 게시판 모듈에서 새로운 게시판을 생성할 때도 "모듈 이름", "모듈 분류"라는 항목을 볼 수 있었다. 우선 "모듈 분류"는 차치하고서라도 "왜 게시판 모듈에서 생성하는 낱개의 게시판에 대해서도 모듈이라고 표현할까?"

게시판 모듈에서 생성되는 게시판의 이름을 모듈이라고 표현한 의미는 프로그램 모듈(게시판)의 자식 모듈이고, 이렇게 생성된 게시판은 콘텐츠(content) 영역에 독립적으로 교환 가능한 내용 변수의 값이 되기 때문이다.

게시판 생성 후 레이아웃과 연결하지 않았다면 게시판의 독자적인 기능만 사용하게 됨으로 게시판만 출력된다.
하지만 레이아웃과 연결시켜 주면 레이아웃 안에 있는 내용변수가 프로그램 모듈이 생성한 자식 모듈, 즉 콘텐츠 영역에 출력할 내용의 값으로 콘텐츠 모듈을 찾게 되고, 만약 존재한다면 변수로서 내용을 가져와 출력하게 된다. 이러한 일을 당담하는 레이아웃의 내용변수 이름은 $content이다.
콘텐츠 영역을 제외한 헤더, 사이드바, 푸터의 모든 영역은 레이아웃이 표현하는 것이다.

따라서 게시판 모듈, 즉 큰 단위의 프로그램 모듈이 생성한 자식 모듈, 다시 말해서 콘텐츠 모듈도 부모 모듈과 같이 내용으로써 독립적인 역할을 수행하기 때문에 작은 의미의 "모듈"이라는 개념을 공유할 수 있다.

이러한 모듈의 개념을 더 확장한다면 페이지도 빼놓을 수 없는 콘텐츠 모듈이다.

*문서 페이지, 위젯 페이지, 외부 페이지의 이해

특정한 프로그램 모듈은 그 기능과 역할을, 생성되는 자식 모듈에게 그대로 복사하여 전달한다.
따라서 게시판을 만들기 위한 프로그램은 게시판을 생성하겠지요. 반면에 페이지 모듈은 빈 페이지를 전달한다. 대신 페이지를 생성하는 단계에서 어떠한 용도로 사용할 것인지 묻게 된다.

Q : "만약 여러분에게 빈 페이지가 주어진다면 어떤 그림을 그리고 싶은가요?"
이 물음에 대한 대답으로 XE 코어는 다음의 3가지 유형을 미리 준비한 것입니다.

나는 에디터를 활용하여 콘텐츠 영역에서 직접 내용을 작성하고 싶습니다. [문서 페이지]
나는 작은 프로그램(위젯)을 이용해 최근글 또는 댓글, 이미지 등의 목록을 만들어 예쁘게 꾸미고 싶습니다. [위젯 페이지]
나는 다른 곳(외부 폴더)에 있는 문서나 또는 프로그램을 현재 페이지에 포함시켜 활용하고 싶습니다. [외부 페이지]

페이지를 생성하는 과정에서 이러한 유형은 페이지 타입의 선택 옵션으로 위젯형, 문서형, 외부페이지형으로 구분한다. 페이지 모듈에서 생성된 페이지도 독립적인 애용변수의 값(B) 가 될 수 있기 때문에 모듈이라는 개념으로 이해할 수 있다. 따라서 페이지도 작은 의미의 모듈이라는 이름을 붙여주고 호출하는 것이다.

위에서 레이아웃은 겉옷이라고 표현하였다.
왜냐하면 다음 과정에서 메뉴를 만들고 생성된 모듈과 연결하게 되는데 메뉴가 호출하는 대상은 프로그램 모듈도, 레이아웃도 아닌 생성된 콘텐츠 모듈 또는 페이지이기 때문이다. 따라서 생성된 모듈이나 페이지 모듈은 요청에 따라 응답할 때 미리 설정된 레이아웃을 입고 나가게 되는데, 레이아웃은 자신을 가장 잘 돋보이도록 돕는 역할을 하게 된다.

겉옷이 있다면 속옷도 있다. 그것은 모듈 스킨(skin)이 하는 일이다.
스킨은 부모 모듈의 동작에 대한 결과값을 자식 모듈에게 전달할 때 다양한 방법으로 꾸며주는 일을 하게 된다.
즉 자식 모듈의 스타일링(styling)이라 말 할 수 있으며 자식 모듈에게 한정되고 모듈 스스로를 꾸미는 일이라 말할 수 있다.
따라서 레이아웃과 스킨의 설정(겉옷과 속옷)은 모듈의 생성 단계에서 자신이 선택하는 옵션값으로 존재하는 것이다.

이 부분을 좀 더 쉽게 설명하면 프로그램 모듈은 스킨(skin) 폴더에 자식 모듈이 입고 나갈 옷들을 종류별로 미리 준비해 두었다. 하지만 자식 모듈은 늘 사춘기여서 " 네가 어떤 옷을 입고 나가면 좋겠다."는 말은 할 수 없다.
자식 모듈은 친구(메뉴)가 부를 때 자신의 스타일(레이아웃과 스킨)은 본인 스스로가 결정한다는 의미이기 때문이다.
따라서 레이아웃과 스킨은 디자인적 요소에 속한다.

또한 이렇게 생성된 모듈과 페이지 등이 너무 많아져서 모듈을 구분하기가 어려워질 수 있다.
이러한 경우 [설치된 모듈] > [모듈 분류]에서 미리 분류명을 등록해 두고, 모듈 생성 단계에서 [ 모듈 분류]를 활용하면 연관된 모듈을 관리하는데 도움이 되는 유용한 기능이다.
부모 모듈의 입장에서 생성된 자식 모듈이 주로 어떤 일에 연관된 모듈인지 꼬리표를 달아두는 기능이다.

* 문서 페이지 만들기

관리자 메뉴에서 [확장기능] > [설치된 모듈] > [페이지] 모듈을 클릭하고 페이지  관리에 들어간다.
페이지 관리에서 문서형, 위젯형, 외부 페이지형식의 페이지 모듈을 생성할 수 있다.
현재는 사이트 메뉴 편집에서 사이트 맵을 추가할 수 있다.

문서형은 말그대로 에디터를 이용하여 첨부파일 등과 함께 직접 문서를 작성하고 꾸밀 수 있다.

*위젯 페이지 만들기

문서 페이지 만들기와 똑같이 사용하면 되고 문서와 다른점은 위젯을 다운받아서 필요한 기능들만 불러와 사용할 수 있다.

*외부 페이지 만들기

외부 페이지는 XE코어 외부에 위치한 HTML 또는 PHP파일을 XE에서 사용할 수 있도록 한다.
외부 페이지는 include(부분,요소 등을 포함하다, 넣다, 끼우다)와 동일한 성격을 가지고 있고 코어는 언제든지 완성된 HTML문서를 제공하여 화면에 출력하기 때문에 body 엘리먼트 안에서 사용하는 태그만 활용하여 문서의 구조를 작성한다.

한마디로 <body>(내용....)</body> 저 내용의 글만 있어도 출력해준다.(신기한건 jquery를 따로 안불러와도 되더라...)

완성된 HTML 문서란 HTML 문서가 반드시 가지고 있어야 할 문서형식선언(DOCTYPE)이나 html, head, body와 같은 기본 구조를 표현하기 위한 엘리먼트를 말한다.
위와 같은 구조 형식은 XE코어를 설치하는 것만으로도 코어가 모두 기본적으로 제공하기 때문이다.

만약 콘텐츠 모듈이 레이아웃을 선택하지 않았다면 내용은 모두  body 엘리먼트 사이에서 출력되는 것을 의미하고 이것은 게시판 모듈도 마찬가지다.
다시 말해서 XE코어의 모든 내용은 완성된 HTML문서 안의 <body>와</body>태그 사이에 표현되는 프로그램이다.
따라서 외부페이지를 include 한다는 것은 XE코어와는 별개의 HTML문서를 body안으로 불러와 포함시킨다는 뜻이고 바로 이러한 기능이 제로보드 4와 XE의 가장 큰 차이점이다.

제로보드4에서는 레이아웃을 만들때 내용을 포함하는 테이블(TABLE)의 <TD> 윗부분과 </TD> 아랫부분을 나누어 저장한 후 모든 HTML,PHP의 내용 문서마다 나누어진 header.php와 footer.php파일을 풀칠해(include) 붙여줘야만 온전한 한 개의 HTML문서가 완성됐다.
XE코어는 정반대로 온전한 HTML문서의 body안에 독립적으로 생성된 페이지, 모듈 등을 불러와 사용할 수 있는 것이다. 이러한 이유로 <body>와 </body> 태그 사이에 들어오는 모든 내용에는 <!DOCTYPE>, <html>, <head>, <body> 태그가 전혀 필요하지 않는다.
오로지 내용을 구조화 할 수 있는 태그만 사용된다. <div>, <h1>, <p> 등등...

따라서 우선 XE코어 외부에 별도의 문서 또는 php파일을 만들어 업로드 한 후 페이지 내부로 불러 때 대상의 파일의 위치는 자유롭게 설정이 가능하다. 또한 XE코어는 UTF-8 서버에 설치하고 운영하는 프로그램으로 코어 내부에 포함시키고자 하는 문서의 인코딩 형식은 반드시 UTF-8로 저장해야 한다.
만약 ANSI형식으로 저장한 경우 텍스트가 깨져보이게 된다.

아래 주석을 제외한 2줄의 내용을 에디트플러스를 이용하여 새로운 test.html문서로 만들고 UTF-8 인코딩 형식으로 저장한 후, 서버 계정의 루트(root) 디렉터리(xe폴더가 있는 같은 디렉토리)에 page디렉토리를 추가한 후 업로드 하세요.
호스팅 계정의 환경에 따라 최상위 루트(root) 디렉토리의 이름은 html이나 public_html 또는 www로 사용될 수 있다.
(※ XE코어를 루트에 설치한 경우 루트 디렉토리 안에 page폴더를 만들어야한다.)